Media = {}
Media_mt = {}

Media_mt.__index = Media

function Media.new(id)
	local mediaObject = {
		id = id, 
		hasEnd = false,
		father = nil,
		properties = {},
		sons = {}
	}
	setmetatable(mediaObject, Media_mt)
	return mediaObject
end

--Getters
function Media:getId() return self.id end
function Media:getSource() return self.source end
function Media:getRegion() return self.region end
function Media:getDescriptor() return self.descriptor end
function Media:getMediaType() return self.mediaType end
function Media:getType() return "media" end
function Media:getFather() return self.father end

--Setters
function Media:setId (id) self.id = id end
function Media:setFather(father) self.father = father end
function Media:setEnd(bool) self.hasEnd = bool end

function Media:addSon (son)
	table.insert(self.sons, son)
end

function Media:addProperty(name, value)
	self.properties[name] = value
end
--
-- Gerador de NCL
function Media:toNCL(indent) --Fazer checagens aqui
	local newNCL = indent.."<media id=\""..self.id.."\" "

	for pos,val in pairs(self.properties) do
		if utils.containsValue(mediaRestrictedProperties, pos) then
			newNCL = newNCL..pos.."="..val
			self.properties[pos] = nil
		end
	end
	newNCL = newNCL.."/>"

	for pos,val in pairs(self.properties) do
		if utils.containsValue(mediaProperties, pos) then
			newNCL = newNCL..indent.."   <property name=\""..pos.."\" value="..val.."/>"
		else
			utils.printErro("Invalid media propertie "..pos..".")
		end
	end

	for pos,val in pairs(self.sons) do
		newNCL = newNCL..val:toNCL(indent.."   ")
	end

	newNCL = newNCL..indent.."</media>"
	return newNCL
end

