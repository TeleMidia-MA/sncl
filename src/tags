!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Inspector:alreadyVisited	utils/inspect.lua	/^function Inspector:alreadyVisited(v)$/;"	f
Inspector:down	utils/inspect.lua	/^function Inspector:down(f)$/;"	f
Inspector:getId	utils/inspect.lua	/^function Inspector:getId(v)$/;"	f
Inspector:putKey	utils/inspect.lua	/^function Inspector:putKey(k)$/;"	f
Inspector:putTable	utils/inspect.lua	/^function Inspector:putTable(t)$/;"	f
Inspector:putValue	utils/inspect.lua	/^function Inspector:putValue(v)$/;"	f
Inspector:puts	utils/inspect.lua	/^function Inspector:puts(...)$/;"	f
Inspector:tabify	utils/inspect.lua	/^function Inspector:tabify()$/;"	f
['function'] 	utils/inspect.lua	/^  ['function'] = 5, ['userdata'] = 6, ['thread'] = 7$/;"	f
beginParse	main.lua	/^function beginParse(args)$/;"	f
containValue 	utils/utils.lua	/^   containValue = function(tbl, value)$/;"	f
countTableAppearances	utils/inspect.lua	/^local function countTableAppearances(t, tableAppearances)$/;"	f
elementProperties 	parser/macros.lua	/^   elementProperties = function(ele, newEle, call, sT)$/;"	f
escape	utils/inspect.lua	/^local function escape(str)$/;"	f
gen.genActions	parser/gen.lua	/^function gen.genActions(acts, indent)$/;"	f
gen.genBind	parser/gen.lua	/^function gen.genBind(ele, indent, sT)$/;"	f
gen.genConditions	parser/gen.lua	/^function gen.genConditions(conds, indent, props)$/;"	f
gen.genDesc	parser/gen.lua	/^function gen.genDesc(ele, indent)$/;"	f
gen.genRegion	parser/gen.lua	/^function gen.genRegion(ele, indent)$/;"	f
gen:genBodyNCL	parser/gen.lua	/^function gen:genBodyNCL(indent, sT)$/;"	f
gen:genHeadNCL	parser/gen.lua	/^function gen:genHeadNCL(indent, sT)$/;"	f
gen:genLink	parser/gen.lua	/^function gen:genLink(ele, indent, sT)$/;"	f
gen:genNCL	parser/gen.lua	/^function gen:genNCL(sT)$/;"	f
gen:genPresentation	parser/gen.lua	/^function gen:genPresentation(ele, indent, sT)$/;"	f
gen:genXConnector	parser/gen.lua	/^function gen:genXConnector(xconn, indent)$/;"	f
getElementsWithClass 	utils/utils.lua	/^   getElementsWithClass = function(elements, class)$/;"	f
getIndex 	utils/utils.lua	/^   getIndex = function(tbl, value)$/;"	f
getNonSequentialKeys	utils/inspect.lua	/^local function getNonSequentialKeys(t)$/;"	f
getSequenceLength	utils/inspect.lua	/^local function getSequenceLength(t)$/;"	f
getToStringResultSafely	utils/inspect.lua	/^local function getToStringResultSafely(t, mt)$/;"	f
if type(__tostring) 	utils/inspect.lua	/^  if type(__tostring) == 'function' then$/;"	f
inspect.KEY       	utils/inspect.lua	/^inspect.KEY       = setmetatable({}, {__tostring = function() return 'inspect.KEY' end})$/;"	f
inspect.METATABLE 	utils/inspect.lua	/^inspect.METATABLE = setmetatable({}, {__tostring = function() return 'inspect.METATABLE' end})$/;"	f
inspect.inspect	utils/inspect.lua	/^function inspect.inspect(root, options)$/;"	f
isIdentifier	utils/inspect.lua	/^local function isIdentifier(str)$/;"	f
isSequenceKey	utils/inspect.lua	/^local function isSequenceKey(k, sequenceLength)$/;"	f
line	utils/pegdebug.lua	/^  local function line(s) return (string.format("%q", s):gsub("\\\\\\n", "\\\\n")) end$/;"	f
local copySequence 	utils/inspect.lua	/^local copySequence = function(s)$/;"	f
local enter 	utils/pegdebug.lua	/^    local enter = Cmt(P(true), function(s, p, ...)$/;"	f
local eq 	utils/pegdebug.lua	/^    local eq = Cmt(P(true), function(s, p, ...)$/;"	f
local leave 	utils/pegdebug.lua	/^    local leave = Cmt(P(true), function(s, p, ...)$/;"	f
lpegMatch 	utils/utils.lua	/^   lpegMatch = function(grammar, input)$/;"	f
makeBind 	parser/parse-tree.lua	/^   makeBind = function(str, _type)$/;"	f
makeDesc 	parser/resolve.lua	/^   makeDesc = function(region, sT)$/;"	f
makeElementsLoop	parser/process.lua	/^function makeElementsLoop(lp, els)$/;"	f
makeLink 	parser/parse-tree.lua	/^   makeLink = function(str, sT, isMacroSon)$/;"	f
makeMacro 	parser/parse-tree.lua	/^   makeMacro = function(str, sT)$/;"	f
makeMacroCall 	parser/parse-tree.lua	/^   makeMacroCall = function(str, sT)$/;"	f
makePath	utils/inspect.lua	/^local function makePath(path, ...)$/;"	f
makePort 	parser/parse-tree.lua	/^   makePort = function(str, sT, isMacroSon)$/;"	f
makePresentationElement 	parser/parse-tree.lua	/^   makePresentationElement = function(str, sT, isMacroSon)$/;"	f
makeProperty 	parser/parse-tree.lua	/^   makeProperty = function(str)$/;"	f
makeRelationship 	parser/parse-tree.lua	/^   makeRelationship = function(str)$/;"	f
makeTemplate 	parser/parse-tree.lua	/^   makeTemplate = function(str, sT)$/;"	f
p 	utils/pegdebug.lua	/^        p = Cp() * p \/ function(pos, ...)$/;"	f
pegdebug.trace	utils/pegdebug.lua	/^function pegdebug.trace(grammar, opts)$/;"	f
pre_process 	parser/pre-process.lua	/^   pre_process = function(sT)$/;"	f
pretty	utils/pegdebug.lua	/^  local function pretty(...)$/;"	f
print 	utils/pegdebug.lua	/^    print = function(...) table.insert(opts.out, table.concat({...}, "\\t")) end$/;"	f
printErro 	utils/utils.lua	/^   printErro = function(errString, line)$/;"	f
processRecursive	utils/inspect.lua	/^local function processRecursive(process, item, path, visited)$/;"	f
rawpairs	utils/inspect.lua	/^local function rawpairs(t)$/;"	f
resolve.makeConnBind	parser/resolve.lua	/^function resolve.makeConnBind(xconn, bind)$/;"	f
resolve:makeConn	parser/resolve.lua	/^function resolve:makeConn(link, sT)$/;"	f
resolveMacros.getArgument	parser/macros.lua	/^function resolveMacros.getArgument(arguments, parameters, value)$/;"	f
resolveMacros:aux	parser/macros.lua	/^function resolveMacros:aux(call, stack, sT)$/;"	f
resolveMacros:bind	parser/macros.lua	/^function resolveMacros:bind(bind, call, sT)$/;"	f
resolveMacros:call	parser/macros.lua	/^function resolveMacros:call(call, stack, sT)$/;"	f
resolveMacros:link	parser/macros.lua	/^function resolveMacros:link(ele, call, sT)$/;"	f
resolveMacros:presentation	parser/macros.lua	/^function resolveMacros:presentation(ele, call, stack, sT)$/;"	f
resolveTemplate 	parser/templates.lua	/^   resolveTemplate = function(eles, loop, pos)$/;"	f
setmetatable(inspect, { __call 	utils/inspect.lua	/^setmetatable(inspect, { __call = function(_, ...) return inspect.inspect(...) end })$/;"	f
smartQuote	utils/inspect.lua	/^local function smartQuote(str)$/;"	f
sortKeys	utils/inspect.lua	/^local function sortKeys(a, b)$/;"	f
utils:addProperty	utils/utils.lua	/^function utils:addProperty(element, name, value)$/;"	f
utils:getNumberOfParents	utils/utils.lua	/^function utils:getNumberOfParents(ele, nFathers)$/;"	f
utils:isIdUsed	utils/utils.lua	/^function utils:isIdUsed(id, sT)$/;"	f
utils:isMacroSon	utils/utils.lua	/^function utils:isMacroSon(ele)$/;"	f
utils:readFile	utils/utils.lua	/^function utils:readFile(file)$/;"	f
utils:writeFile	utils/utils.lua	/^function utils:writeFile(file, content)$/;"	f
